/* Generated By:JavaCC: Do not edit this line. minilengcompiler.java */
package analizador;

import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.ArrayList;

import analizador.TokenMgrError;
import analizador.minilengcompilerTokenManager;
import analizador.SimpleCharStream;

import lib.lexico.TablaOcurrencias;
import lib.lexico.ErrorLexico;
import lib.sintactico.ErrorSintactico;
import lib.sintactico.PanicMode;
import lib.semantico.Simbolo;
import lib.semantico.Simbolo.*;
import lib.semantico.TablaSimbolos;
import lib.semantico.SimboloYaDeclaradoException;
import lib.semantico.SimboloNoEncontradoException;
import lib.semantico.InvocacionAccionException;
import lib.semantico.ErrorSemantico;
import lib.semantico.RegistroExpr;
import lib.semantico.RegistroOp;
import lib.semantico.UnderflowException;
import lib.semantico.OverflowException;
import lib.aviso.Aviso;

import lib.generacioncodigo.GeneracionCodigo;
import lib.generacioncodigo.ListaInstr;


public class minilengcompiler implements minilengcompilerConstants {

        private static final String version = "2.2";
        private static final String fecha_version = "abril de 2020";

        protected static Boolean verbose_mode = false;
        protected static Boolean panic_mode = false;
        protected static Boolean show_tokens = false;
        protected static Boolean debug = false;

        private static Boolean compilado_sin_errores = true;
        private static Boolean entrado_en_panic = false;

        public static TablaOcurrencias tabla_ocurrencias;
        private static TablaSimbolos tabla_simbolos;

        // Generacion de código
        private static GeneracionCodigo generacion_codigo;

        private static void help() {
                System.out.println("Uso: minilengcompiler [opciones] fichero\u005cn");

        System.out.println("Opciones:");
        System.out.println("  -v, --verbose  Mostrar un resumen de los s\u00edmbolos utilizados en el programa");
        System.out.println("  -p, --panic\u0009 Compila con panic mode");
        System.out.println("  -t, --tokens   Muestra los tokens que se van reconociendo");
        System.out.println("  -d, --debug    Muestra la tabla de s\u00edmbolos antes y despu\u00e9s de cerrar los bloques");
        System.out.println("  -h, --help\u0009 Imprimir ayuda (esta pantalla) y salir");
        System.out.println("  --version      Imprimir informaci\u00f3n sobre la versi\u00f3n y salir");

        System.exit(0);
    }

    private static void version() {
        System.out.println("Compilador de MiniLeng -- version " + version + " (" + fecha_version + ")");
        System.out.println("Autor: Fernando Pe\u00f1a Bes (NIA: 756012)\u005cn");

                System.out.println("  Pr\u00e1cticas de la asignatura: Procesadores de Lenguajes");
                System.out.println("  Curso 2019-2020");
                System.out.println("  Universidad de Zaragoza");
                System.out.println("");
                System.out.println("Programado con JavaCC");

        System.exit(0);
    }

    private static void opcionInvalida(String opcion) {
        System.err.println("Error: Opci\u00f3n inv\u00e1lida: '" + opcion + "'\u005cn");
        help();
    }

    private static String procesarArgumentos(String args[]) {
        String fichero_entrada = null;
                ArrayList<String> opciones = new ArrayList<String>();

        // Obtener opciones
                for (String arg : args) {
                    if (arg.charAt(0) == '-') {
                      // opciones
                      if (arg.length() == 1) {
                          opcionInvalida(arg);
                      }
                      else if (arg.charAt(1) == '-') {
                          opciones.add(arg);
                      }
                      else {
                          for (String opt : arg.substring(1).split("")) {
                              opciones.add("-" + opt);
                          }
                      }
                    }
                    else {
                      // fichero de entrada
                      fichero_entrada = arg;
                      break;
                    }
                }

                // Activar opciones
                for (String opt : opciones) {
                    switch(opt) {
                                case "-h":
                                case "--help":
                                help();
                                break;
                            case "--version":
                                version();
                                break;
                                case "-v":
                                case "--verbose":
                                        verbose_mode = true;
                                        break;
                                case "-p":
                                case "--panic":
                                        panic_mode = true;
                                        break;
                                case "-t":
                                case "--tokens":
                                show_tokens = true;
                                break;
                        case "-d":
                        case "--debug":
                                debug = true;
                                break;
                                default:
                                    opcionInvalida(opt);
                    }
                }
                return fichero_entrada;
        }


        public static void main(String args []) throws ParseException {

                // Entrada al programa
        InputStream stream = System.in;
        String fichero_entrada = procesarArgumentos(args);

                if (fichero_entrada != null) {
                        // Si el fichero no terminal en .ml, error
                        if (!fichero_entrada.endsWith(".ml")) {
                        System.err.println("Error: El fichero a compilar tiene que tener extensi\u00f3n .ml");
                        System.err.println("       Fichero introducido: '" + fichero_entrada + "'");
                        System.exit(0);
                        }

                        // Ejecutar el compilador con los fichero introducidos
                        // System.out.println("MiniLeng: Leyendo el fichero '" + fichero_entrada + "'...");
                try {
                        stream = new FileInputStream(fichero_entrada);
                }
                catch (FileNotFoundException e) {
                        System.err.println("Error: No se ha encontrado el fichero '" + fichero_entrada + "'");
                        System.exit(0);
                }
                }
                else {
                        help();
                }

                // Inicializar generación de código
                // Cambiar extensión .ml por .code
                String fichero_salida = fichero_entrada.substring(0, fichero_entrada.length() - 2) + "code";
                generacion_codigo = new GeneracionCodigo(fichero_salida);

                // Crear e inicializar tabla de ocurrencias
                tabla_ocurrencias = new TablaOcurrencias(show_tokens);

                // Crear e inicializar tabla de símbolos
                tabla_simbolos = new TablaSimbolos();

                // Ejecución del compilador
        try {
                minilengcompiler parser = new minilengcompiler(stream);
                minilengcompiler.programa();
        }
        catch (Exception e) {
            // Si un error semántico o sintáctico llega a este nivel
            // se ha producido un error en el funcionamiento del compilador
            System.err.println("Error en el compilador");
            System.err.println("Cabeza de lectura: (l\u00ednea " + token.beginLine + ", columna " + token.beginColumn + ") " + token);
                throw e;
        }
        catch (Error e) {
                        // Detectado error léxico
                        SimpleCharStream entrada = minilengcompilerTokenManager.input_stream;
                        String error;

                        try {
                                error = Character.toString(entrada.readChar());
                        }
                        catch (java.io.IOException fin_fichero) {
                                error = "<EOF>";
                        }

                        ErrorLexico.deteccion(entrada.getEndLine(), entrada.getEndColumn(), error, TokenMgrError.addEscapes(error));
                }

                // Imprimir resultados de la compilación
                resultadosCompilacion(fichero_salida);
                if (compilado_sin_errores) {
                  generacion_codigo.escribirPrograma();
                }
    }

        static void resultadosCompilacion(String fichero_salida) {

                // Mostrar tabla de ocurrencias
        if (verbose_mode) {
                tabla_ocurrencias.imprimirTabla();
        }


                // Mostrar contadores de errores
                if (ErrorLexico.getContadorErrores() > 0) {
                    if (compilado_sin_errores) {
                      System.out.println();
                    }
                        compilado_sin_errores = false;
                        System.out.println("Errores l\u00e9xicos: " + ErrorLexico.getContadorErrores());
                }

                if (ErrorSintactico.getContadorErrores() > 0) {
                    if (compilado_sin_errores) {
                      System.out.println();
                    }
                        compilado_sin_errores = false;
                        System.out.println("Errores sint\u00e1cticos: " + ErrorSintactico.getContadorErrores());
                }

                if (ErrorSemantico.getContadorErrores() > 0) {
                  if (compilado_sin_errores) {
                    System.out.println();
                  }
                  compilado_sin_errores = false;
                  System.out.println("Errores sem\u00e1nticos: " + ErrorSemantico.getContadorErrores());
                }

                if (Aviso.getContadorAvisos() > 0) {
                    if (compilado_sin_errores) {
                      System.out.println();
                    }
                        System.out.println("Avisos: " + Aviso.getContadorAvisos());
                }

            if (PanicMode.getContadorErrores() > 0) {
                        entrado_en_panic = true;
                        System.out.println("N\u00famero de activaciones del panic mode: " + PanicMode.getContadorErrores());
                }

                // Resultados compilacion
                if (!compilado_sin_errores) {
                        System.out.println("\u005cnNo se ha podido compilar el programa.");
                }
                else if (entrado_en_panic) {
                        System.out.println("\u005cnSe ha activado el panic mode durante la compilaci\u00f3n. Es necesario corregir los errores y volver a compilar.");
                }
                else {
                    if (Aviso.getContadorAvisos() > 0) {
                      System.out.println();
                    }
                        System.out.println("Compilaci\u00f3n finalizada. Se ha generado el fichero '" + fichero_salida + "'.");
                }
        }

/**** Análisis sintáctico ****/

// Inicio programa

/*
 * programa	::=	<tPROGRAMA> identificador fin_sentencia declaracion_variables declaracion_acciones bloque_sentencias <EOF>
 */
  static final public int programa() throws ParseException {
  int nivel = 0;
  tabla_simbolos.inicializar_tabla();

  Token t = null;

  ListaInstr l = new ListaInstr();
  ListaInstr lAcciones = null;
  ListaInstr lSentencias = null;

  Integer etiq;
    try {
      jj_consume_token(tPROGRAMA);
      t = identificador();
            if (t != null) {
                  tabla_simbolos.introducir_programa(t.image, 0);
                }
      fin_sentencia();
      declaracion_variables();
      lAcciones = declaracion_acciones();
      lSentencias = bloque_sentencias();
      jj_consume_token(0);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "La declaraci\u00f3n del programa es incorrecta");
    }
     if (debug) {
       System.out.println("Antes de cerrar el programa. Nivel " + nivel);
       tabla_simbolos.imprimirTabla();
     }

         // Cerrar el programa y limpiar la tabla de símbolos
     tabla_simbolos.eliminar_variables(nivel);
         tabla_simbolos.eliminar_acciones(nivel);
         tabla_simbolos.eliminar_programa();

         if (debug) {
           System.out.println("Despu\u00e9s de cerrar programa");
           tabla_simbolos.imprimirTabla();
     }

          // Generación de código
         if (t != null) {
                l.addPrograma(t.image, generacion_codigo.nuevaEtiqueta(), lAcciones, lSentencias);
                generacion_codigo.guardarPrograma(l);
         }
        // Fin del compilador
    {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

// Declaraciones de separadores y limitadores de bloque
  static final public void fin_sentencia() throws ParseException {
    try {
      jj_consume_token(tFIN_SENTENCIA);
    } catch (ParseException e) {
    // Si el modo pánico está activado, descartar entrada hasta el siguiente ;
    if (panic_mode) {
      PanicMode.iniciar(e, "Se esperaba ';'", tFIN_SENTENCIA, ";");
    }
    else {
      ErrorSintactico.deteccion(e, "Se esperaba ';'");
    }
    }
  }

  static final public void sep_variable() throws ParseException {
    try {
      jj_consume_token(tSEP_VARIABLE);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba ','");
    }
  }

  static final public void parentesis_izq() throws ParseException {
    try {
      jj_consume_token(tPARENTESIS_IZQ);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Falta par\u00e9ntesis de cierre: ')'");
    }
  }

  static final public void parentesis_der() throws ParseException {
    try {
      jj_consume_token(tPARENTESIS_DER);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba '('");
    }
  }

  static final public void corchete_izq() throws ParseException {
    try {
      jj_consume_token(tCORCHETE_IZQ);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba '['");
    }
  }

  static final public void corchete_der() throws ParseException {
    try {
      jj_consume_token(tCORCHETE_DER);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba ']'");
    }
  }

  static final public Integer longitud_const() throws ParseException {
  Token t;
  Integer len = null;
    try {
      t = jj_consume_token(tCONSTENTERA);
      len = Integer.parseInt(t.image);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una constante entera");
    }
    {if (true) return len;}
    throw new Error("Missing return statement in function");
  }

  static final public void principio() throws ParseException {
    try {
      jj_consume_token(tPRINCIPIO);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba el delimitador de principio de bloque: 'principio'");
    }
  }

  static final public void fin() throws ParseException {
    try {
      jj_consume_token(tFIN);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba el delimitador fin de bloque: 'fin'");
    }
  }

  static final public Token identificador() throws ParseException {
  Token t = null;
    try {
      t = jj_consume_token(tIDENTIFICADOR);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un identificador");
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

// Declaracion de variables

/*
 * declaracion_variables ::= ( declaracion fin_sentencia )*
 */
  static final public void declaracion_variables() throws ParseException {
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tENTERO:
        case tBOOLEANO:
        case tCARACTER:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        declaracion();
        fin_sentencia();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "");
    }
  }

/*
 * declaracion ::= tipo_variables identificadores
 */
  static final public void declaracion() throws ParseException {
  Tipo_variable tipo;
  ArrayList<Token> listaIdentificadores;
    try {
      tipo = tipo_variables();
      identificadores(tipo);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una declaraci\u00f3n de variables");
    }
  }

/*
 * tipo_variables	::=	( <tENTERO> | <tCARACTER> | <tBOOLEANO> )
 */
  static final public Tipo_variable tipo_variables() throws ParseException {
  Tipo_variable variable = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTERO:
        jj_consume_token(tENTERO);
                    variable = Tipo_variable.ENTERO;
        break;
      case tCARACTER:
        jj_consume_token(tCARACTER);
                  variable = Tipo_variable.CHAR;
        break;
      case tBOOLEANO:
        jj_consume_token(tBOOLEANO);
                  variable = Tipo_variable.BOOLEANO;
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un tipo de dato");
    }
    {if (true) return variable;}
    throw new Error("Missing return statement in function");
  }

/*
 * identificadores	::=	identificador_declaracion ( sep_variable identificador_declaracion )*
 */
  static final public void identificadores(Tipo_variable tipo) throws ParseException {
    try {
      identificador_declaracion(tipo);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSEP_VARIABLE:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        sep_variable();
        identificador_declaracion(tipo);
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba uno o varios identificadores o vectores");
    }
  }

/*
 * identificador_declaracion = identificador ( corchete_izq longitud_const corchete_der )?
 */
  static final public void identificador_declaracion(Tipo_variable tipo) throws ParseException {
  Token id = null;
  Integer len = null;
    try {
      id = identificador();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCORCHETE_IZQ:
        corchete_izq();
        len = longitud_const();
        corchete_der();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      try {
        if (id != null && tipo != null) {
          if (len == null) {
            // variable
            tabla_simbolos.introducir_variable(id.image, tipo, generacion_codigo.getNivel(), generacion_codigo.nuevaVariable());
          }
          else {
            // vector
            tabla_simbolos.introducir_variable_vector(id.image, tipo, len, generacion_codigo.getNivel(), generacion_codigo.nuevoVector(len));
          }
            }
          }
          catch (SimboloYaDeclaradoException e) {
            ErrorSemantico.deteccion(e, id);
          }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba la declaraci\u00f3n de una variable o vector");
    }
  }

// Declaración de acciones

/*
 * declaracion_acciones ::= ( declaracion_accion )*
 */
  static final public ListaInstr declaracion_acciones() throws ParseException {
  ListaInstr l = new ListaInstr();

  ListaInstr lDeclAccion;
    try {
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tACCION:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        lDeclAccion = declaracion_accion();
            l.concatenarLista(lDeclAccion);
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * declaracion_accion ::= cabecera_accion fin_sentencia declaracion_variables declaracion_acciones bloque_sentencias
 */
  static final public ListaInstr declaracion_accion() throws ParseException {
  Token t = token.next;

  ListaInstr l = new ListaInstr();

  ListaInstr lCabecera = null;
  ListaInstr lAcciones = null;
  ListaInstr lSentencias = null;
    try {
      lCabecera = cabecera_accion();
      fin_sentencia();
      declaracion_variables();
      lAcciones = declaracion_acciones();
      lSentencias = bloque_sentencias();
          if (debug) {
            System.out.println("Antes de cerrar la acci\u00f3n: " + t.next.image + ". Nivel " + generacion_codigo.getNivel());
        tabla_simbolos.imprimirTabla();
      }

          // Cerrar el bloque y limpiar la tabla de símbolos
          tabla_simbolos.eliminar_variables(generacion_codigo.getNivel());
          tabla_simbolos.eliminar_parametros(generacion_codigo.getNivel());
          tabla_simbolos.eliminar_acciones(generacion_codigo.getNivel());
          generacion_codigo.cerrarBloque();

          if (debug) {
            System.out.println("Despu\u00e9s de cerrar la acci\u00f3n");
            tabla_simbolos.imprimirTabla();
          }

          // Generación de código
          l.addAccion(t.next.image, generacion_codigo.nuevaEtiqueta(), lCabecera, lAcciones, lSentencias);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una declaraci\u00f3n de acci\u00f3n");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * cabecera_accion	::=	<tACCION> identificador ( parametros_formales )?
 */
  static final public ListaInstr cabecera_accion() throws ParseException {
  Token id;
  Simbolo s = null;

  ArrayList<Simbolo> listaParametros;

  ListaInstr l = new ListaInstr();
    try {
      jj_consume_token(tACCION);
      id = identificador();
          // Procesar símbolo del identificador
          if (id != null) {
            try {
              s = tabla_simbolos.introducir_accion(id.image, generacion_codigo.getNivel(), generacion_codigo.nuevaEtiqueta());

                  // Generación de código
                  // Añadir etiqueta de inicio de acción
              l.addEtiqueta(s.getDir());
            }
            catch (SimboloYaDeclaradoException e) {
              ErrorSemantico.deteccion(e, id);
            }
            generacion_codigo.abrirBloque();
          }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPARENTESIS_IZQ:
        listaParametros = parametros_formales(s);
            // Generación de código
            // Recuperar los parámetros de la invocación. Hay que hacerlo en orden inverso
            for (int i = (listaParametros.size() - 1); i >= 0; i--) {
              l.addRecuperarPar(listaParametros.get(i), i, generacion_codigo.getNivel());
            }
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Falta la cabecera de la acci\u00f3n");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * parametros_formales	::=	parentesis_izq ( parametros ( fin_sentencia parametros )* )? parentesis_der
 */
  static final public ArrayList<Simbolo> parametros_formales(Simbolo s) throws ParseException {
  ArrayList<Simbolo> parametros;

  ArrayList<Simbolo> listaParametros = new ArrayList<Simbolo>();
    try {
      parentesis_izq();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
      case tREF:
        parametros = parametros(s);
        listaParametros.addAll(parametros);
        label_4:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case tFIN_SENTENCIA:
            ;
            break;
          default:
            jj_la1[6] = jj_gen;
            break label_4;
          }
          fin_sentencia();
          parametros = parametros(s);
          listaParametros.addAll(parametros);
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      parentesis_der();
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaban los parametros formales de la accion");
    }
    {if (true) return listaParametros;}
    throw new Error("Missing return statement in function");
  }

/*
 * parametros	::=	clase_parametros tipo_variables lista_parametros
 */
  static final public ArrayList<Simbolo> parametros(Simbolo s) throws ParseException {
  Clase_parametro clase;
  Tipo_variable tipo;

  ArrayList<Simbolo> listaParametros = new ArrayList<Simbolo>();
    try {
      clase = clase_parametros();
      tipo = tipo_variables();
      listaParametros = lista_parametros(clase, tipo, s);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaban par\u00e1metros");
    }
    {if (true) return listaParametros;}
    throw new Error("Missing return statement in function");
  }

/*
 * lista_parametros	::=	identificador_parametro ( sep_variable identificador_parametro )*
 */
  static final public ArrayList<Simbolo> lista_parametros(Clase_parametro clase, Tipo_variable tipo, Simbolo s) throws ParseException {
  ArrayList<Simbolo> listaParametros = new ArrayList<Simbolo>();

  Simbolo par;
    try {
      par = identificador_parametro(clase, tipo, s);
      if (par != null) {
        listaParametros.add(par);
      }
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSEP_VARIABLE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        sep_variable();
        par = identificador_parametro(clase, tipo, s);
        if (par != null) {
          listaParametros.add(par);
        }
      }
    } catch (ParseException e) {
        ErrorSintactico.deteccion(e, "Se esperaba una lista de par\u00e1metros");
    }
    {if (true) return listaParametros;}
    throw new Error("Missing return statement in function");
  }

/*
 * clase_parametros	::=	( <tVAL> | <tREF> )
 */
  static final public Clase_parametro clase_parametros() throws ParseException {
  Clase_parametro clase = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tVAL:
        jj_consume_token(tVAL);
                   clase = Clase_parametro.VAL;
        break;
      case tREF:
        jj_consume_token(tREF);
               clase = Clase_parametro.REF;
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un tipo de parametro");
    }
    {if (true) return clase;}
    throw new Error("Missing return statement in function");
  }

/*
 * identificador_parametro ::= identificador ( corchete_izq longitud_const corchete_der )?
 */
  static final public Simbolo identificador_parametro(Clase_parametro clase, Tipo_variable tipo, Simbolo s) throws ParseException {
  Token id;
  Integer len = null;
  Simbolo par = null;
    try {
      id = identificador();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCORCHETE_IZQ:
        corchete_izq();
        len = longitud_const();
        corchete_der();
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      if (id != null && clase != null && tipo != null) {
        try {
          if (len == null) {
            // parametro
                par = tabla_simbolos.introducir_parametro(id.image, tipo, clase, generacion_codigo.getNivel(), generacion_codigo.nuevaVariable());
          }
          else {
            // parametro vector
            if (clase == Clase_parametro.VAL) {
              // Si es por valor, hay que reservar espacio para todas las componentes
                  par = tabla_simbolos.introducir_parametro_vector(id.image, tipo, clase, len, generacion_codigo.getNivel(), generacion_codigo.nuevoVector(len));
            }
            else if (clase == Clase_parametro.REF) {
              // Si es por referencia, hay que reservar espacio sólo para la dirección de inicio
                  par = tabla_simbolos.introducir_parametro_vector(id.image, tipo, clase, len, generacion_codigo.getNivel(), generacion_codigo.nuevaVariable());
            }
          }
        }
        catch (SimboloYaDeclaradoException e) {
          // Si el símbolo está ya declarado, se introduce como un parámetro anónimo
              // en la lista de parametros para poder hacer la comprobación de signatura
              // al llamar a la función, pero no se mete en la tabla de simbolos.
              ErrorSemantico.deteccion(e, id);
              par = new Simbolo();
              par.introducir_parametro("_anonymus", tipo, clase, generacion_codigo.getNivel(), generacion_codigo.nuevaVariable());
        }
      }
    } catch (ParseException e) {
        ErrorSintactico.deteccion(e, "Se esperaba un par\u00e1metro");
    }
    if (s != null && par != null) {
      // añadir el parametro a la acción
      s.addParametro(par);
    }
    // par.setInicializado(true);
    {if (true) return par;}
    throw new Error("Missing return statement in function");
  }

// Sentencias

/*
 * bloque_sentencias ::= principio lista_sentencias fin
 */
  static final public ListaInstr bloque_sentencias() throws ParseException {
  ListaInstr l = new ListaInstr();
    try {
      principio();
      l = lista_sentencias();
      fin();
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un bloque se sentencias");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * lista_sentencias ::= sentencia ( sentencia )*
 */
  static final public ListaInstr lista_sentencias() throws ParseException {
  ListaInstr l = new ListaInstr();
  ListaInstr lSentencia;
    try {
      lSentencia = sentencia();
      l.concatenarLista(lSentencia);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSI:
        case tMQ:
        case tESCRIBIR:
        case tLEER:
        case tIDENTIFICADOR:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_6;
        }
        lSentencia = sentencia();
        l.concatenarLista(lSentencia);
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaban una o m\u00e1s sentencias");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * sentencia ::= ( leer | escribir | identificacion | seleccion | mientras_que )
 */
  static final public ListaInstr sentencia() throws ParseException {
  ListaInstr l = new ListaInstr();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tLEER:
        l = leer();
        break;
      case tESCRIBIR:
        l = escribir();
        break;
      case tIDENTIFICADOR:
        l = identificacion();
        break;
      case tSI:
        l = seleccion();
        break;
      case tMQ:
        l = mientras_que();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una sentencia");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * leer ::= <tLEER> parentesis_izq lista_asignables parentesis_der fin_sentencia
 */
  static final public ListaInstr leer() throws ParseException {
  Token t;
  ArrayList<RegistroExpr> listaExpr = new ArrayList<RegistroExpr>();

  ListaInstr l = new ListaInstr();
    try {
      t = jj_consume_token(tLEER);
      parentesis_izq();
      listaExpr = lista_asignables(t);
      parentesis_der();
      fin_sentencia();
          // Generación de código
          for (RegistroExpr expr : listaExpr) {
            if (expr.esChar()) {
              l.addLeerChar(expr.getListaInstr());
            }
            else {
              l.addLeerEnt(expr.getListaInstr());
            }
          }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba la sentencia leer");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * lista_asignables ::= lista_expresiones
 */
  static final public ArrayList<RegistroExpr> lista_asignables(Token t) throws ParseException {
  ArrayList<RegistroExpr> listaExpr = new ArrayList<RegistroExpr>();

  ArrayList<RegistroExpr> listaEscribibles = new ArrayList<RegistroExpr>();
    try {
      listaExpr = lista_expresiones();
          for (int i = 0; i < listaExpr.size(); i++) {
            if (listaExpr.get(i).esVector()) {
          ErrorSemantico.deteccion(new InvocacionAccionException(),
           "La expresi\u00f3n " + (i + 1) + " es un vector, no es asignable en una instrucci\u00f3n leer", t);
            }
        else if (listaExpr.get(i).esParVal()) {
          ErrorSemantico.deteccion(new InvocacionAccionException(),
            "La expresi\u00f3n " + (i + 1) + " es un par\u00e1metro por valor, no es asignable", t);
        }
        else if (!listaExpr.get(i).esAsignable()) {
               ErrorSemantico.deteccion(new InvocacionAccionException(),
              "La expresi\u00f3n " + (i + 1) + " no es asignable", t);
            }
            else {
              listaEscribibles.add(listaExpr.get(i));
            }
          }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una lista de asignables");
    }
    {if (true) return listaEscribibles;}
    throw new Error("Missing return statement in function");
  }

/*
 * escribir	::=	<tESCRIBIR> parentesis_izq lista_escribibles parentesis_der fin_sentencia
 */
  static final public ListaInstr escribir() throws ParseException {
  ArrayList<RegistroExpr> listaExpr = new ArrayList<RegistroExpr>();

  ListaInstr l = new ListaInstr();
    try {
      jj_consume_token(tESCRIBIR);
      parentesis_izq();
      listaExpr = lista_escribibles();
      parentesis_der();
      fin_sentencia();
           // Generación de código
           for (RegistroExpr expr : listaExpr) {
                if (expr.esEnt()) {
                  l.addEscribirEnt(expr.getListaInstr());
                }
                else if (expr.esChar()) {
                  l.addEscribirChar(expr.getListaInstr());
                }
                else if (expr.esBool()) {
                  if (expr.getValorBool() != null) {
                    if (expr.getValorBool()) {
                      l.addEscribirCad("True");
                    }
                    else {
                      l.addEscribirCad("False");
                    }
                  }
                  else {
                    l.addEscribirBool(expr.getListaInstr(), generacion_codigo.nuevaEtiqueta(), generacion_codigo.nuevaEtiqueta());
                  }
                }
                else if (expr.esCad()) {
                  l.addEscribirCad(expr.getValorCad());
                }
          }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba la sentencia escribir");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * lista_escribibles ::= escribible (sep_variable escribible)*
 */
  static final public ArrayList<RegistroExpr> lista_escribibles() throws ParseException {
  RegistroExpr reg;
  ArrayList<RegistroExpr> listaExpr = new ArrayList<RegistroExpr>();
    try {
      // Expresiones y cadenas de caracteres
          reg = escribible();
      if (reg != null) {
        listaExpr.add(reg);
      }
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSEP_VARIABLE:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_7;
        }
        sep_variable();
        reg = escribible();
        if (reg != null) {
          listaExpr.add(reg);
        }
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una lista de escribibles");
    }
    {if (true) return listaExpr;}
    throw new Error("Missing return statement in function");
  }

/*
 * escribible ::= ( expresion | <tCONSTCAD> )
 */
  static final public RegistroExpr escribible() throws ParseException {
  RegistroExpr reg = null;
  Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTACAR:
      case tCARAENT:
      case tPARENTESIS_IZQ:
      case tMAS:
      case tMENOS:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tIDENTIFICADOR:
      case tCONSTENTERA:
      case tCONSTCHAR:
        reg = expresion();
        break;
      case tCONSTCAD:
        t = jj_consume_token(tCONSTCAD);
      if (reg == null) {
        reg = new RegistroExpr();
        reg.setTipoCad();
        String cad = t.image;
        // Eliminar el primer y último caracteres, que serán "
        cad = cad.substring(1);
        cad = cad.substring(0, cad.length() - 1);
        reg.setValorCad(cad);
      }
      else if (reg.esVector()) {
        ErrorSemantico.deteccion("No se pueden escribir vectores", token);
        reg = null;
      }
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un escribible");
    }
    {if (true) return reg;}
    throw new Error("Missing return statement in function");
  }

/*
 * mientras_que ::= <tMQ> expresion lista_sentencias <tFMQ>
 */
  static final public ListaInstr mientras_que() throws ParseException {
  Token t;
  RegistroExpr reg;
  Boolean ok = true;

  ListaInstr l = new ListaInstr();

  ListaInstr lSentencias;
    t = jj_consume_token(tMQ);
    reg = expresion();
    if (!reg.esDesc() && !reg.esBool()) {
      ErrorSemantico.deteccion("La condici\u00f3n del 'mientras_que' debe ser una expresi\u00f3n booleana", t);
      ok = false;
    }
    else if (reg.esBool() && reg.getValorBool() != null) {
      if (reg.getValorBool()) {
        Aviso.deteccion("La expresi\u00f3n del 'mientras_que' siempre es 'true', se produce un bucle infinito", t);
      }
      else {
        Aviso.deteccion("La expresi\u00f3n del 'mientras_que' siempre es 'false', el interior del bloque es c\u00f3digo muerto", t);
        ok = false;
      }
    }
    lSentencias = lista_sentencias();
    try {
      jj_consume_token(tFMQ);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba el delimitador de fin de estructura MQ: 'FMQ'");
    }
    // Generación de código

    // Si va a ser código muerto, no se genera código
    if (ok) {
          l.addMientrasQue(reg.getListaInstr(), lSentencias, generacion_codigo.nuevaEtiqueta(), generacion_codigo.nuevaEtiqueta());
    }

    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * seleccion ::= <tSI> expresion <tENT> lista_sentencias ( <tSI_NO> lista_sentencias )* <tFSI>
 */
  static final public ListaInstr seleccion() throws ParseException {
  Token t;
  RegistroExpr reg;

  Boolean ok = true;

  ListaInstr l = new ListaInstr();

  ListaInstr lSi;
  ListaInstr lSino = null;
    t = jj_consume_token(tSI);
    reg = expresion();
    try {
      jj_consume_token(tENT);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba el token 'ENT'");
    }
    lSi = lista_sentencias();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tSI_NO:
      jj_consume_token(tSI_NO);
      lSino = lista_sentencias();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    try {
      jj_consume_token(tFSI);
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba el delimitador de fin de estructura SI: 'FSI'");
    }
        // Generación de código
        // Si va a ser código muerto no se genera código

    if (!reg.esDesc() && !reg.esBool()) {
      ErrorSemantico.deteccion("La condici\u00f3n de la selecci\u00f3n debe ser una expresi\u00f3n booleana", t);
    }
    else if (reg.esBool() && reg.getValorBool() != null) {
      if (lSino == null) {
        if (reg.getValorBool()) {
          l.concatenarLista(lSi);
        }
        else {
          Aviso.deteccion("La expresi\u00f3n del 'si' es siempre 'false', el interior del bloque es c\u00f3digo muerto", t);
        }
      }
      else {
        if (reg.getValorBool()) {
          Aviso.deteccion("La expresi\u00f3n de la selecci\u00f3n es siempre 'true', el interior del bloque 'si_no' es c\u00f3digo muerto", t);
          l.concatenarLista(lSi);
        }
        else {
          Aviso.deteccion("La expresi\u00f3n de la selecci\u00f3n es siempre 'false', el interior del bloque 'si' es c\u00f3digo muerto", t);
          l.concatenarLista(lSino);
        }
      }
    }
    else {
          if (lSino != null) {
            l.addSeleccion(reg.getListaInstr(), lSi, lSino, generacion_codigo.nuevaEtiqueta(), generacion_codigo.nuevaEtiqueta());
          }
          else {
            l.addSeleccionSimple(reg.getListaInstr(), lSi, generacion_codigo.nuevaEtiqueta());
          }
    }

        {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * identificacion ::= identificador ( ( corchete_izq expresion corchete_der )? asignacion fin_sentencia | ( argumentos )? fin_sentencia )
 */
  static final public ListaInstr identificacion() throws ParseException {
  Token t;
  RegistroExpr indice = null;

  Simbolo s = null;
  Tipo_variable tpID = Tipo_variable.DESCONOCIDO;

  ListaInstr l = new ListaInstr();

  ListaInstr lArgs = null;
  ListaInstr lAsig;
    try {
      t = identificador();
          try {
            s = tabla_simbolos.buscar_simbolo(t.image);
          }
          catch (SimboloNoEncontradoException e) {
            ErrorSemantico.deteccion(e, t);
          }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tCORCHETE_IZQ:
      case tOPAS:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCORCHETE_IZQ:
          corchete_izq();
          indice = expresion();
          corchete_der();
          break;
        default:
          jj_la1[16] = jj_gen;
          ;
        }
        lAsig = asignacion(s, indice, t);
        fin_sentencia();
        // Generación de código
        l.concatenarLista(lAsig);
        break;
      case tPARENTESIS_IZQ:
      case tFIN_SENTENCIA:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPARENTESIS_IZQ:
          lArgs = argumentos(s, t);
          break;
        default:
          jj_la1[17] = jj_gen;
          ;
        }
        fin_sentencia();
        if (s != null) {
          if (!s.ES_ACCION()) {
            ErrorSemantico.deteccion(new InvocacionAccionException(),
              "El s\u00edmbolo no es una acci\u00f3n", t);
          }
          else if (!s.getListaParametros().isEmpty() && lArgs == null) {
            ErrorSemantico.deteccion(new InvocacionAccionException(),
                  "La acci\u00f3n requiere " + s.getListaParametros().size() + " argumentos", t);
          }
          else {
            // Generación de código
            // Concatenar las instrucciones de los argumentos si las hay
            if (lArgs != null) {
              l.concatenarLista(lArgs);
            }
            l.addInvocacionAccion(s, generacion_codigo.getSig(), generacion_codigo.getNivel());
          }
        }
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una asignaci\u00f3n o una acci\u00f3n");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * asignacion	::=	<tOPAS> expresion
 */
  static final public ListaInstr asignacion(Simbolo s, RegistroExpr indice, Token izq) throws ParseException {
  RegistroExpr reg;
  Token t;

  ListaInstr l = new ListaInstr();
    try {
      t = jj_consume_token(tOPAS);
      reg = expresion();
      if (s != null) {
        if (!s.ES_VECTOR() && indice != null) {
          ErrorSemantico.deteccion("El s\u00edmbolo no es un vector", izq);
        }
        else if (s.ES_ACCION()) {
              ErrorSemantico.deteccion("No se puede realizar una asignaci\u00f3n a una acci\u00f3n", izq);
            }
            else if (s.ES_PROGRAMA()) {
              ErrorSemantico.deteccion("No se puede realizar una asignaci\u00f3n a un programa", izq);
            }
            else if (s.ES_PARAMETRO() && s.ES_VALOR()) {
              ErrorSemantico.deteccion("No se puede realizar una asignaci\u00f3n a un par\u00e1metro por valor", izq);
                }
                else if (s.ES_VARIABLE() || (s.ES_PARAMETRO() && s.ES_REFERENCIA())) {
                  if ((!reg.esDesc() && s.getVariable() != reg.getTipo()) || (s.ES_VECTOR() ^ (indice != null)) != reg.esVector()) {
            ErrorSemantico.deteccion("Tipos incompatibles en la asignaci\u00f3n", t);
                  }
                  else if (s.ES_VECTOR() && reg.esVector() && s.getLongitud() != reg.getLongitud()) {
                    ErrorSemantico.deteccion("No se puede realizar la asignaci\u00f3n directa de vectores de diferente longitud", t);
                  }
                  else {
                    // La asignación es correcta

                    // s.setInicializado(true);

                    // Generación de código
                    if (s.ES_VECTOR() && indice == null) {
                      // Asignación directa de vectores
                      l.addAsigVectores(s, reg.getSimbolo(), generacion_codigo.getNivel());
                    }
                    else {
                      // Asignación de valor a variable
                      l.addAsigVariable(s, generacion_codigo.getNivel(), indice, reg.getListaInstr());
                    }
                  }
                }
          }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una asignaci\u00f3n");
    }
    {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

/*
 * argumentos ::= parentesis_izq ( lista_expresiones )? parentesis_der
 */
  static final public ListaInstr argumentos(Simbolo s, Token t) throws ParseException {
  ArrayList<RegistroExpr> listaExpr = null;
  ArrayList<Simbolo> listaParams;

  ListaInstr listaInstr = null;
    try {
      parentesis_izq();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tENTACAR:
      case tCARAENT:
      case tPARENTESIS_IZQ:
      case tMAS:
      case tMENOS:
      case tNOT:
      case tTRUE:
      case tFALSE:
      case tIDENTIFICADOR:
      case tCONSTENTERA:
      case tCONSTCHAR:
        listaExpr = lista_expresiones();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      parentesis_der();
          if (s != null && listaExpr != null && s.ES_ACCION()) {
            listaInstr = new ListaInstr();

            listaParams = s.getListaParametros();

                if (listaExpr.size() != listaParams.size()) {
              ErrorSemantico.deteccion(new InvocacionAccionException(),
              "El n\u00famero de argumentos es incorrecto, se esperaban " + listaParams.size(), t);
            }
            else {
          for (int i = 0; i < listaExpr.size(); i++) {
            RegistroExpr arg = listaExpr.get(i);
            Simbolo param = listaParams.get(i);

            if (!arg.esDesc()) {

              // Comprobar tipo
              if ((arg.getTipo() != param.getVariable() || arg.esVector() != param.ES_VECTOR())
                   || (arg.esVector() && param.ES_VECTOR() && arg.getLongitud() != param.getLongitud())) {

                String tipoEsperado = param.getVariableString();
                if (param.ES_VECTOR()) {
                  tipoEsperado += "[" + param.getLongitud() + "]";
                }

                ErrorSemantico.deteccion(new InvocacionAccionException(),
                  "El tipo del argumento " + (i + 1) + " no coincide con el del par\u00e1metro, se esperaba " + tipoEsperado, t);
              }

              // Comprobar que se pase como referencia un argumento asignable
              else if (param.ES_REFERENCIA() && arg.esParVal()) {
                ErrorSemantico.deteccion(new InvocacionAccionException(),
                  "El argumento " + (i + 1) + " es un par\u00e1metro por valor, no es asignable y no se puede pasar por referencia", t);
                          }
              else if (param.ES_REFERENCIA() && !arg.esAsignable()) {
                ErrorSemantico.deteccion(new InvocacionAccionException(),
                    "La expresi\u00f3n del argumento " + (i + 1) + " no es asignable, as\u00ed que no se puede pasar por referencia", t);
              }
              else {
                // El argumento es válido

                // Generación de código
                if (param.ES_VECTOR() && param.ES_VALOR()) {
                  listaInstr.addComentario("Apilar argumento " + (i + 1) + ": " + param);
                  listaInstr.addApilarValoresVector(arg.getSimbolo(), generacion_codigo.getNivel());
                }
                else {
                  listaInstr.addApilarArgumento(param, i, arg.getListaInstr());
                }
              }
            }
          }
        }
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una lista de argumentos");
    }
    {if (true) return listaInstr;}
    throw new Error("Missing return statement in function");
  }

// Expresiones

/*
 * lista_expresiones ::= expresion ( sep_variable expresion )*
 */
  static final public ArrayList<RegistroExpr> lista_expresiones() throws ParseException {
  ArrayList<RegistroExpr> listaExpr = new ArrayList<RegistroExpr>();
  RegistroExpr reg;
    try {
      // Construir una lista con el tipo y clase de los argumentos
          reg = expresion();
      listaExpr.add(reg);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tSEP_VARIABLE:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_8;
        }
        sep_variable();
        reg = expresion();
        listaExpr.add(reg);
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una lista de expresiones");
    }
    {if (true) return listaExpr;}
    throw new Error("Missing return statement in function");
  }

/*
 * expresion ::= expresion_simple ( operador_relacional expresion_simple )?
 */
  static final public RegistroExpr expresion() throws ParseException {
  RegistroExpr reg1 = new RegistroExpr();
  RegistroExpr reg2 = new RegistroExpr();
  RegistroOp op;
    try {
      reg1 = expresion_simple();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMAYOR:
      case tMENOR:
      case tIGUAL:
      case tMAI:
      case tMEI:
      case tNI:
        op = operador_relacional();
        reg2 = expresion_simple();
            if (op != null) {
                  reg1 = RegistroExpr.operar(op, reg1, reg2);
                }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una expresi\u00f3n");
    }
    // Generación de código
    reg1.sustituirConstante();

    {if (true) return reg1;}
    throw new Error("Missing return statement in function");
  }

/*
 * operador_relacional ::= ( <tIGUAL> | <tMENOR> | <tMAYOR> | <tMAI> | <tMEI> | <tNI> )
 */
  static final public RegistroOp operador_relacional() throws ParseException {
  Token t;
  RegistroOp op = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tIGUAL:
        t = jj_consume_token(tIGUAL);
                       op = new RegistroOp(t, RegistroOp.Operador.IGUAL);
        break;
      case tMENOR:
        t = jj_consume_token(tMENOR);
                   op = new RegistroOp(t, RegistroOp.Operador.MENOR);
        break;
      case tMAYOR:
        t = jj_consume_token(tMAYOR);
                   op = new RegistroOp(t, RegistroOp.Operador.MAYOR);
        break;
      case tMAI:
        t = jj_consume_token(tMAI);
                   op = new RegistroOp(t, RegistroOp.Operador.MAI);
        break;
      case tMEI:
        t = jj_consume_token(tMEI);
                   op = new RegistroOp(t, RegistroOp.Operador.MEI);
        break;
      case tNI:
        t = jj_consume_token(tNI);
                   op = new RegistroOp(t, RegistroOp.Operador.NI);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un operador relacional: '=', ' >', '<', '<=', '>=', o '!='");
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/*
 * expresion_simple ::= termino ( operador_aditivo termino )*
 */
  static final public RegistroExpr expresion_simple() throws ParseException {
  RegistroExpr reg1 = new RegistroExpr();
  RegistroExpr reg2 = new RegistroExpr();
  RegistroOp op;
    try {
      reg1 = termino();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tMAS:
        case tMENOS:
        case tOR:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        op = operador_aditivo();
        reg2 = termino();
        if (op != null) {
          reg1 = RegistroExpr.operar(op, reg1, reg2);
        }
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba una expresi\u00f3n simple");
    }
    // Generación de código
    reg1.sustituirConstante();

    {if (true) return reg1;}
    throw new Error("Missing return statement in function");
  }

/*
 * operador_aditivo	::=	( <tMAS> | <tMENOS> | <tOR> )
 */
  static final public RegistroOp operador_aditivo() throws ParseException {
  Token t;
  RegistroOp op = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMAS:
        t = jj_consume_token(tMAS);
                   op = new RegistroOp(t, RegistroOp.Operador.MAS);
        break;
      case tMENOS:
        t = jj_consume_token(tMENOS);
                   op = new RegistroOp(t, RegistroOp.Operador.MENOS);
        break;
      case tOR:
        t = jj_consume_token(tOR);
                   op = new RegistroOp(t, RegistroOp.Operador.OR);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un operador aditivo: '+', '-', o 'OR'");
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/*
 * termino ::= factor ( operador_multiplicativo factor )*
 */
  static final public RegistroExpr termino() throws ParseException {
  RegistroExpr reg1 = null;
  RegistroExpr reg2;
  RegistroOp op;
    try {
      reg1 = factor();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tPRODUCTO:
        case tDIVISION:
        case tMOD:
        case tDIV:
        case tAND:
          ;
          break;
        default:
          jj_la1[25] = jj_gen;
          break label_10;
        }
        op = operador_multiplicativo();
        reg2 = factor();
        if (op != null) {
          reg1 = RegistroExpr.operar(op, reg1, reg2);
        }
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un t\u00e9rmino");
    }
    // Generación de código
    reg1.sustituirConstante();

    {if (true) return reg1;}
    throw new Error("Missing return statement in function");
  }

/*
 * operador_multiplicativo ::= ( <tPRODUCTO> | <tDIVISION> | <tMOD> | <tAND> )
 */
  static final public RegistroOp operador_multiplicativo() throws ParseException {
  Token t;
  RegistroOp op = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tPRODUCTO:
        t = jj_consume_token(tPRODUCTO);
                      op = new RegistroOp(t, RegistroOp.Operador.PRODUCTO);
        break;
      case tDIVISION:
        t = jj_consume_token(tDIVISION);
                      op = new RegistroOp(t, RegistroOp.Operador.DIVISION);
        break;
      case tMOD:
        t = jj_consume_token(tMOD);
                      op = new RegistroOp(t, RegistroOp.Operador.MOD);
        break;
      case tDIV:
        t = jj_consume_token(tDIV);
                      op = new RegistroOp(t, RegistroOp.Operador.DIV);
        break;
      case tAND:
        t = jj_consume_token(tAND);
                      op = new RegistroOp(t, RegistroOp.Operador.AND);
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un operador multiplicativo: '*', '/', 'MOD', 'AND'");
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/*
 * factor	::=	(     <tMENOS> factor
 *                  | <tMAS> factor
 *                  | <tNOT> factor
 *					| parentesis_izq expresion parentesis_der
 *					| <tENTACAR> parentesis_izq expresion parentesis_der
 *					| <tCARAENT> parentesis_izq expresion parentesis_der
 *					| identificador | <tCONSTENTERA> | <tCONSTCHAR>
 *					| <tCONSTCAD> | <tTRUE> | <tFALSE> )
 */
  static final public RegistroExpr factor() throws ParseException {
  Token t = null;
  Simbolo s;
  RegistroExpr indice = null;

  RegistroExpr reg = new RegistroExpr();
  reg.setTipoDesc();
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tMENOS:
        t = jj_consume_token(tMENOS);
        reg = factor();
      if (reg.esVector()) {
        ErrorSemantico.deteccion("No se pueden realizar operaciones con vectores", t);
        reg.setVector(false);
        reg.setTipoEnt();
      }
      else if (!reg.esEnt() && !reg.esDesc()) {
        ErrorSemantico.deteccion("Tipo incompatible. Se esperaba entero", t);
        reg.setTipoEnt();
      }
      else {
        if (reg.esEnt() && reg.getValorEnt() != null) {
          reg.setValorEnt(-reg.getValorEnt());
        }

        // Generacion código
        reg.getListaInstr().addMenosUnario();
      }
      reg.setAsignable(false);
        break;
      case tMAS:
        t = jj_consume_token(tMAS);
        reg = factor();
      if (reg.esVector()) {
        ErrorSemantico.deteccion("No se pueden realizar operaciones con vectores", t);
        reg.setVector(false);
        reg.setTipoEnt();
      }
      else if (!reg.esEnt() && !reg.esDesc()) {
        ErrorSemantico.deteccion("Tipo incompatible. Se esperaba entero", t);
        reg.setTipoEnt();
      }
      reg.setAsignable(false);

      // Generación código. No se añade código

        break;
      case tNOT:
        t = jj_consume_token(tNOT);
        reg = factor();
      if (reg.esVector()) {
        ErrorSemantico.deteccion("No se pueden realizar operaciones con vectores", t);
        reg.setVector(false);
      }
      else if (!reg.esBool() && !reg.esDesc()) {
        ErrorSemantico.deteccion("Tipo incompatible. Se esperaba booleano", t);
        reg.setTipoBool();
      }
      else {
        if (reg.esBool() && reg.getValorBool() != null) {
          reg.setValorBool(!reg.getValorBool());
        }

            // Generacion código
            reg.getListaInstr().addNegacionUnaria();
      }
          reg.setAsignable(false);
        break;
      case tPARENTESIS_IZQ:
        parentesis_izq();
        reg = expresion();
        parentesis_der();

        break;
      case tENTACAR:
        t = jj_consume_token(tENTACAR);
        parentesis_izq();
        reg = expresion();
        parentesis_der();
          if (reg.esVector() || !reg.esEnt() && !reg.esDesc()) {
            ErrorSemantico.deteccion("La expresi\u00f3n no se puede convertir en un car\u00e1cter v\u00e1lido", t);
            reg.setVector(false);
          }
          else if (reg.esEnt() && reg.getValorEnt() != null) {
            Integer carNum = reg.getValorEnt();
            if (carNum < 0 || carNum > 256) {
              ErrorSemantico.deteccion("La expresi\u00f3n no produce un entero ASCII v\u00e1lido", t);
            }
            else {
              reg.setValorChar((char)carNum.intValue());
            }
          }
          reg.setTipoChar();
          reg.setAsignable(false);

          // Generación código. No se añade código
          // La representación interna de caracteres y enteros en la máquina P es la misma

        break;
      case tCARAENT:
        t = jj_consume_token(tCARAENT);
        parentesis_izq();
        reg = expresion();
        parentesis_der();
      if (reg.esVector() || !reg.esChar() && !reg.esDesc()) {
        ErrorSemantico.deteccion("La expresi\u00f3n no se puede convertir en un entero v\u00e1lido", t);
        reg.setVector(false);
      }
      else if (reg.esChar() && reg.getValorChar() != null) {
        Character car = reg.getValorChar();
        if (Character.isWhitespace(car)) {
          reg.setValorEnt(0);
        }
        else {
          // El caracter es ASCII, si no se habría producido un error léxico
          reg.setValorEnt((int) t.image.charAt(0));
       }
     }
     reg.setTipoEnt();
     reg.setAsignable(false);

      // Generación código. No se añade código.
      // La representación interna de caracteres y enteros en la máquina P es la misma.

        break;
      case tIDENTIFICADOR:
        t = identificador();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCORCHETE_IZQ:
          corchete_izq();
          indice = expresion();
          corchete_der();
          break;
        default:
          jj_la1[27] = jj_gen;
          ;
        }
      if (t != null) {
          try {
              // puede ser una variable simple o un vector

              s = tabla_simbolos.buscar_simbolo(t.image);

              if (s.ES_ACCION()) {
                  ErrorSemantico.deteccion("No se puede utilizar una acci\u00f3n dentro de una expresi\u00f3n", t);
                  reg.setTipoDesc();
              }
              else if (s.ES_PROGRAMA()) {
                  ErrorSemantico.deteccion("No se puede utilizar un programa dentro de una expresi\u00f3n", t);
                  reg.setTipoDesc();
              }
              else if (!(s.ES_VARIABLE() || s.ES_PARAMETRO())) {
                  reg.setTipoDesc();
              }
              else {
                  // El símbolo es variable o parametro

                                 /*
                  if (s.getNivel() == generacion_codigo.getNivel() && !s.INICIALIZADO()) {
                    Aviso.deteccion("El símbolo podría no estar inicializado", t);
                  }
                  */

                  if (s.ES_VARIABLE()) {
                      reg.setTipo(s.getVariable());
                      reg.setAsignable(true);
                  }
                  else if (s.ES_PARAMETRO()) {
                      reg.setTipo(s.getVariable());
                      if (s.ES_VALOR()) {
                          reg.setParVal();
                      }
                      else if (s.ES_REFERENCIA()) {
                          reg.setParRef();
                          reg.setAsignable(true);
                      }
                  }

                  // Vectores
                  if (s.ES_VECTOR()) {
                      if (indice == null) {
                          // Vector completo
                          reg.setVector(true);
                          reg.setLongitud(s.getLongitud());
                      }
                      else {
                          // Acceso a una componente del vector

                          // Comprobar tipo
                          if (!indice.esDesc() && !indice.esEnt()) {
                              ErrorSemantico.deteccion("La expresi\u00f3n para acceder a una componente del vector debe ser entera", t);
                          }
                          else if (indice.esEnt() && indice.getValorEnt() != null) {
                              // Comprobar overflow/underflow
                              if (indice.getValorEnt() < 0) {
                                  Aviso.deteccion(new UnderflowException(), t);
                              }
                              else if (indice.getValorEnt() > (s.getLongitud() - 1)) {
                                  Aviso.deteccion(new OverflowException(), t);
                              }
                          }
                      }
                  }
              }

              // Generación de código
              if (s.ES_VECTOR() && indice  == null) {
                  reg.getListaInstr().addGetDireccion(s, generacion_codigo.getNivel(), null);
              }
              else {
                  reg.getListaInstr().addGetValor(s, generacion_codigo.getNivel(), indice);
              }
              reg.setSimbolo(s);
        }
        catch (SimboloNoEncontradoException e) {
          ErrorSemantico.deteccion(e, t);
          reg.setTipoDesc();
        }
      }
        break;
      case tCONSTENTERA:
        t = jj_consume_token(tCONSTENTERA);
      reg = new RegistroExpr();
      reg.setTipoEnt();
      reg.setValorEnt(Integer.parseInt(t.image));

          // Generación de código
      reg.getListaInstr().addConstEnt(Integer.parseInt(t.image));
        break;
      case tCONSTCHAR:
        t = jj_consume_token(tCONSTCHAR);
      reg = new RegistroExpr();
      reg.setTipoChar();
          String c = t.image;
      // Eliminar el primer y último caracteres, que serán "
      c = c.substring(1);
      c = c.substring(0, c.length() - 1);
      reg.setValorChar(c.charAt(0));

      // Generación de código
      reg.getListaInstr().addConstChar(c.charAt(0));
        break;
      case tTRUE:
        jj_consume_token(tTRUE);
      reg = new RegistroExpr();
      reg.setTipoBool();
      reg.setValorBool(true);

          // Generación de código
      reg.getListaInstr().addConstBool(true);
        break;
      case tFALSE:
        jj_consume_token(tFALSE);
      reg = new RegistroExpr();
      reg.setTipoBool();
      reg.setValorBool(false);

      // Generación de código
      reg.getListaInstr().addConstBool(false);
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
    ErrorSintactico.deteccion(e, "Se esperaba un factor");
    }
     {if (true) return reg;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public minilengcompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x70000000,0x70000000,0x0,0x0,0x2000000,0x0,0x0,0xc000000,0x0,0xc000000,0x0,0x688000,0x688000,0x0,0x1800000,0x20000,0x0,0x0,0x0,0x1800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1800000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x80,0x8,0x0,0x2,0x40,0x0,0x80,0x0,0x8,0x8000000,0x8000000,0x80,0x7e010302,0x0,0x8,0x2,0x6a,0x3e010302,0x80,0x7e0000,0x7e0000,0x8300,0x8300,0x7c00,0x7c00,0x8,0x3e010302,};
   }

  /** Constructor with InputStream. */
  public minilengcompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public minilengcompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new minilengcompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public minilengcompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new minilengcompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public minilengcompiler(minilengcompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(minilengcompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 29; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[63];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 63; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
